/*
* jQuery Form Plugin; v20140218
* http://jquery.malsup.com/form/
* Copyright (c) 2014 M. Alsup; Dual licensed: MIT/GPL
* https://github.com/malsup/form#copyright-and-license
*/
!(function (a) {
  typeof define === 'function' && define.amd ? define(['jquery'], a) : a(typeof jQuery !== 'undefined' ? jQuery : window.Zepto);
}((a) => {
  function b(b) { const c = b.data; b.isDefaultPrevented() || (b.preventDefault(), a(b.target).ajaxSubmit(c)); } function c(b) { let c = b.target; const d = a(c); if (!d.is('[type=submit],[type=image]')) { const e = d.closest('[type=submit]'); if (e.length === 0) return; c = e[0]; } const f = this; if (f.clk = c, c.type == 'image') if (void 0 !== b.offsetX)f.clk_x = b.offsetX, f.clk_y = b.offsetY; else if (typeof a.fn.offset === 'function') { const g = d.offset(); f.clk_x = b.pageX - g.left, f.clk_y = b.pageY - g.top; } else f.clk_x = b.pageX - c.offsetLeft, f.clk_y = b.pageY - c.offsetTop; setTimeout(() => { f.clk = f.clk_x = f.clk_y = null; }, 100); } function d() { if (a.fn.ajaxSubmit.debug) { const b = `[jquery.form] ${Array.prototype.join.call(arguments, '')}`; window.console && window.console.log ? window.console.log(b) : window.opera && window.opera.postError && window.opera.postError(b); } } const e = {}; e.fileapi = void 0 !== a("<input type='file'/>").get(0).files, e.formdata = void 0 !== window.FormData; const f = !!a.fn.prop; a.fn.attr2 = function () { if (!f) return this.attr.apply(this, arguments); const a = this.prop.apply(this, arguments); return a && a.jquery || typeof a === 'string' ? a : this.attr.apply(this, arguments); }, a.fn.ajaxSubmit = function (b) {
    function c(c) { let d; let e; const f = a.param(c, b.traditional).split('&'); const g = f.length; const h = []; for (d = 0; g > d; d++)f[d] = f[d].replace(/\+/g, ' '), e = f[d].split('='), h.push([decodeURIComponent(e[0]), decodeURIComponent(e[1])]); return h; } function g(d) {
      for (var e = new FormData(), f = 0; f < d.length; f++)e.append(d[f].name, d[f].value); if (b.extraData) { const g = c(b.extraData); for (f = 0; f < g.length; f++)g[f] && e.append(g[f][0], g[f][1]); }b.data = null; const h = a.extend(!0, {}, a.ajaxSettings, b, {
        contentType: !1, processData: !1, cache: !1, type: i || 'POST',
      }); b.uploadProgress && (h.xhr = function () { const c = a.ajaxSettings.xhr(); return c.upload && c.upload.addEventListener('progress', (a) => { let c = 0; const d = a.loaded || a.position; const e = a.total; a.lengthComputable && (c = Math.ceil(d / e * 100)), b.uploadProgress(a, d, e, c); }, !1), c; }), h.data = null; const j = h.beforeSend; return h.beforeSend = function (a, c) { c.data = b.formData ? b.formData : e, j && j.call(this, a, c); }, a.ajax(h);
    } function h(c) {
      function e(a) { let b = null; try { a.contentWindow && (b = a.contentWindow.document); } catch (c) { d(`cannot get iframe.contentWindow document: ${c}`); } if (b) return b; try { b = a.contentDocument ? a.contentDocument : a.document; } catch (c) { d(`cannot get iframe.contentDocument: ${c}`), b = a.document; } return b; } function g() { function b() { try { const a = e(r).readyState; d(`state = ${a}`), a && a.toLowerCase() == 'uninitialized' && setTimeout(b, 50); } catch (c) { d('Server abort: ', c, ' (', c.name, ')'), h(A), w && clearTimeout(w), w = void 0; } } const c = l.attr2('target'); const f = l.attr2('action'); const g = 'multipart/form-data'; const j = l.attr('enctype') || l.attr('encoding') || g; x.setAttribute('target', o), (!i || /post/i.test(i)) && x.setAttribute('method', 'POST'), f != m.url && x.setAttribute('action', m.url), m.skipEncodingOverride || i && !/post/i.test(i) || l.attr({ encoding: 'multipart/form-data', enctype: 'multipart/form-data' }), m.timeout && (w = setTimeout(() => { v = !0, h(z); }, m.timeout)); const k = []; try { if (m.extraData) for (const n in m.extraData)m.extraData.hasOwnProperty(n) && (a.isPlainObject(m.extraData[n]) && m.extraData[n].hasOwnProperty('name') && m.extraData[n].hasOwnProperty('value') ? k.push(a(`<input type="hidden" name="${m.extraData[n].name}">`).val(m.extraData[n].value).appendTo(x)[0]) : k.push(a(`<input type="hidden" name="${n}">`).val(m.extraData[n]).appendTo(x)[0])); m.iframeTarget || q.appendTo('body'), r.attachEvent ? r.attachEvent('onload', h) : r.addEventListener('load', h, !1), setTimeout(b, 15); try { x.submit(); } catch (p) { const s = document.createElement('form').submit; s.apply(x); } } finally { x.setAttribute('action', f), x.setAttribute('enctype', j), c ? x.setAttribute('target', c) : l.removeAttr('target'), a(k).remove(); } } function h(b) { if (!s.aborted && !F) { if (E = e(r), E || (d('cannot access response document'), b = A), b === z && s) return s.abort('timeout'), y.reject(s, 'timeout'), void 0; if (b == A && s) return s.abort('server abort'), y.reject(s, 'error', 'server abort'), void 0; if (E && E.location.href != m.iframeSrc || v) { r.detachEvent ? r.detachEvent('onload', h) : r.removeEventListener('load', h, !1); let c; let f = 'success'; try { if (v) throw 'timeout'; const g = m.dataType == 'xml' || E.XMLDocument || a.isXMLDoc(E); if (d(`isXml=${g}`), !g && window.opera && (E.body === null || !E.body.innerHTML) && --G) return d('requeing onLoad callback, DOM not available'), setTimeout(h, 250), void 0; const i = E.body ? E.body : E.documentElement; s.responseText = i ? i.innerHTML : null, s.responseXML = E.XMLDocument ? E.XMLDocument : E, g && (m.dataType = 'xml'), s.getResponseHeader = function (a) { const b = { 'content-type': m.dataType }; return b[a.toLowerCase()]; }, i && (s.status = Number(i.getAttribute('status')) || s.status, s.statusText = i.getAttribute('statusText') || s.statusText); const j = (m.dataType || '').toLowerCase(); const k = /(json|script|text)/.test(j); if (k || m.textarea) { const l = E.getElementsByTagName('textarea')[0]; if (l)s.responseText = l.value, s.status = Number(l.getAttribute('status')) || s.status, s.statusText = l.getAttribute('statusText') || s.statusText; else if (k) { const o = E.getElementsByTagName('pre')[0]; const p = E.getElementsByTagName('body')[0]; o ? s.responseText = o.textContent ? o.textContent : o.innerText : p && (s.responseText = p.textContent ? p.textContent : p.innerText); } } else j == 'xml' && !s.responseXML && s.responseText && (s.responseXML = H(s.responseText)); try { D = J(s, j, m); } catch (t) { f = 'parsererror', s.error = c = t || f; } } catch (t) { d('error caught: ', t), f = 'error', s.error = c = t || f; }s.aborted && (d('upload aborted'), f = null), s.status && (f = s.status >= 200 && s.status < 300 || s.status === 304 ? 'success' : 'error'), f === 'success' ? (m.success && m.success.call(m.context, D, 'success', s), y.resolve(s.responseText, 'success', s), n && a.event.trigger('ajaxSuccess', [s, m])) : f && (void 0 === c && (c = s.statusText), m.error && m.error.call(m.context, s, f, c), y.reject(s, 'error', c), n && a.event.trigger('ajaxError', [s, m, c])), n && a.event.trigger('ajaxComplete', [s, m]), n && !--a.active && a.event.trigger('ajaxStop'), m.complete && m.complete.call(m.context, s, f), F = !0, m.timeout && clearTimeout(w), setTimeout(() => { m.iframeTarget ? q.attr('src', m.iframeSrc) : q.remove(), s.responseXML = null; }, 100); } } } let j; let k; let m; let n; let o; let q; let r; let s; let t; let u; let v; let w; var x = l[0]; var y = a.Deferred(); if (y.abort = function (a) { s.abort(a); }, c) for (k = 0; k < p.length; k++)j = a(p[k]), f ? j.prop('disabled', !1) : j.removeAttr('disabled'); if (m = a.extend(!0, {}, a.ajaxSettings, b), m.context = m.context || m, o = `jqFormIO${(new Date()).getTime()}`, m.iframeTarget ? (q = a(m.iframeTarget), u = q.attr2('name'), u ? o = u : q.attr2('name', o)) : (q = a(`<iframe name="${o}" src="${m.iframeSrc}" />`), q.css({ position: 'absolute', top: '-1000px', left: '-1000px' })), r = q[0], s = {
        aborted: 0, responseText: null, responseXML: null, status: 0, statusText: 'n/a', getAllResponseHeaders() {}, getResponseHeader() {}, setRequestHeader() {}, abort(b) { const c = b === 'timeout' ? 'timeout' : 'aborted'; d(`aborting upload... ${c}`), this.aborted = 1; try { r.contentWindow.document.execCommand && r.contentWindow.document.execCommand('Stop'); } catch (e) {}q.attr('src', m.iframeSrc), s.error = c, m.error && m.error.call(m.context, s, c, b), n && a.event.trigger('ajaxError', [s, m, c]), m.complete && m.complete.call(m.context, s, c); },
      }, n = m.global, n && a.active++ === 0 && a.event.trigger('ajaxStart'), n && a.event.trigger('ajaxSend', [s, m]), m.beforeSend && m.beforeSend.call(m.context, s, m) === !1) return m.global && a.active--, y.reject(), y; if (s.aborted) return y.reject(), y; t = x.clk, t && (u = t.name, u && !t.disabled && (m.extraData = m.extraData || {}, m.extraData[u] = t.value, t.type == 'image' && (m.extraData[`${u}.x`] = x.clk_x, m.extraData[`${u}.y`] = x.clk_y))); var z = 1; var A = 2; const B = a('meta[name=csrf-token]').attr('content'); const C = a('meta[name=csrf-param]').attr('content'); C && B && (m.extraData = m.extraData || {}, m.extraData[C] = B), m.forceSync ? g() : setTimeout(g, 10); let D; let E; let F; var G = 50; var H = a.parseXML || function (a, b) { return window.ActiveXObject ? (b = new ActiveXObject('Microsoft.XMLDOM'), b.async = 'false', b.loadXML(a)) : b = (new DOMParser()).parseFromString(a, 'text/xml'), b && b.documentElement && b.documentElement.nodeName != 'parsererror' ? b : null; }; const I = a.parseJSON || function (a) { return window.eval(`(${a})`); }; var J = function (b, c, d) { const e = b.getResponseHeader('content-type') || ''; const f = c === 'xml' || !c && e.indexOf('xml') >= 0; let g = f ? b.responseXML : b.responseText; return f && g.documentElement.nodeName === 'parsererror' && a.error && a.error('parsererror'), d && d.dataFilter && (g = d.dataFilter(g, c)), typeof g === 'string' && (c === 'json' || !c && e.indexOf('json') >= 0 ? g = I(g) : (c === 'script' || !c && e.indexOf('javascript') >= 0) && a.globalEval(g)), g; }; return y;
    } if (!this.length) return d('ajaxSubmit: skipping submit process - no element selected'), this; let i; let j; let k; var l = this; typeof b === 'function' ? b = { success: b } : void 0 === b && (b = {}), i = b.type || this.attr2('method'), j = b.url || this.attr2('action'), k = typeof j === 'string' ? a.trim(j) : '', k = k || window.location.href || '', k && (k = (k.match(/^([^#]+)/) || [])[1]), b = a.extend(!0, {
      url: k, success: a.ajaxSettings.success, type: i || a.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',
    }, b); const m = {}; if (this.trigger('form-pre-serialize', [this, b, m]), m.veto) return d('ajaxSubmit: submit vetoed via form-pre-serialize trigger'), this; if (b.beforeSerialize && b.beforeSerialize(this, b) === !1) return d('ajaxSubmit: submit aborted via beforeSerialize callback'), this; let n = b.traditional; void 0 === n && (n = a.ajaxSettings.traditional); let o; var p = []; const q = this.formToArray(b.semantic, p); if (b.data && (b.extraData = b.data, o = a.param(b.data, n)), b.beforeSubmit && b.beforeSubmit(q, this, b) === !1) return d('ajaxSubmit: submit aborted via beforeSubmit callback'), this; if (this.trigger('form-submit-validate', [q, this, b, m]), m.veto) return d('ajaxSubmit: submit vetoed via form-submit-validate trigger'), this; let r = a.param(q, n); o && (r = r ? `${r}&${o}` : o), b.type.toUpperCase() == 'GET' ? (b.url += (b.url.indexOf('?') >= 0 ? '&' : '?') + r, b.data = null) : b.data = r; const s = []; if (b.resetForm && s.push(() => { l.resetForm(); }), b.clearForm && s.push(() => { l.clearForm(b.includeHidden); }), !b.dataType && b.target) { const t = b.success || function () {}; s.push(function (c) { const d = b.replaceTarget ? 'replaceWith' : 'html'; a(b.target)[d](c).each(t, arguments); }); } else b.success && s.push(b.success); if (b.success = function (a, c, d) { for (let e = b.context || this, f = 0, g = s.length; g > f; f++)s[f].apply(e, [a, c, d || l, l]); }, b.error) { const u = b.error; b.error = function (a, c, d) { const e = b.context || this; u.apply(e, [a, c, d, l]); }; } if (b.complete) { const v = b.complete; b.complete = function (a, c) { const d = b.context || this; v.apply(d, [a, c, l]); }; } const w = a('input[type=file]:enabled', this).filter(function () { return a(this).val() !== ''; }); const x = w.length > 0; const y = 'multipart/form-data'; const z = l.attr('enctype') == y || l.attr('encoding') == y; const A = e.fileapi && e.formdata; d(`fileAPI :${A}`); let B; const C = (x || z) && !A; b.iframe !== !1 && (b.iframe || C) ? b.closeKeepAlive ? a.get(b.closeKeepAlive, () => { B = h(q); }) : B = h(q) : B = (x || z) && A ? g(q) : a.ajax(b), l.removeData('jqxhr').data('jqxhr', B); for (let D = 0; D < p.length; D++)p[D] = null; return this.trigger('form-submit-notify', [this, b]), this;
  }, a.fn.ajaxForm = function (e) {
    if (e = e || {}, e.delegation = e.delegation && a.isFunction(a.fn.on), !e.delegation && this.length === 0) { const f = { s: this.selector, c: this.context }; return !a.isReady && f.s ? (d('DOM not ready, queuing ajaxForm'), a(() => { a(f.s, f.c).ajaxForm(e); }), this) : (d(`terminating; zero elements found by selector${a.isReady ? '' : ' (DOM not ready)'}`), this); } return e.delegation ? (a(document).off('submit.form-plugin', this.selector, b).off('click.form-plugin', this.selector, c).on('submit.form-plugin', this.selector, e, b)
      .on('click.form-plugin', this.selector, e, c), this) : this.ajaxFormUnbind().bind('submit.form-plugin', e, b).bind('click.form-plugin', e, c);
  }, a.fn.ajaxFormUnbind = function () { return this.unbind('submit.form-plugin click.form-plugin'); }, a.fn.formToArray = function (b, c) {
    const d = []; if (this.length === 0) return d; let f; const g = this[0]; const h = this.attr('id'); let i = b ? g.getElementsByTagName('*') : g.elements; if (i && !/MSIE 8/.test(navigator.userAgent) && (i = a(i).get()), h && (f = a(`:input[form=${h}]`).get(), f.length && (i = (i || []).concat(f))), !i || !i.length) return d; let j; let k; let l; let m; let n; let o; let p; for (j = 0, o = i.length; o > j; j++) {
      if (n = i[j], l = n.name, l && !n.disabled) {
        if (b && g.clk && n.type == 'image')g.clk == n && (d.push({ name: l, value: a(n).val(), type: n.type }), d.push({ name: `${l}.x`, value: g.clk_x }, { name: `${l}.y`, value: g.clk_y })); else if (m = a.fieldValue(n, !0), m && m.constructor == Array) for (c && c.push(n), k = 0, p = m.length; p > k; k++)d.push({ name: l, value: m[k] }); else if (e.fileapi && n.type == 'file') { c && c.push(n); const q = n.files; if (q.length) for (k = 0; k < q.length; k++)d.push({ name: l, value: q[k], type: n.type }); else d.push({ name: l, value: '', type: n.type }); } else {
          m !== null && typeof m !== 'undefined' && (c && c.push(n), d.push({
            name: l, value: m, type: n.type, required: n.required,
          }));
        }
      }
    } if (!b && g.clk) { const r = a(g.clk); const s = r[0]; l = s.name, l && !s.disabled && s.type == 'image' && (d.push({ name: l, value: r.val() }), d.push({ name: `${l}.x`, value: g.clk_x }, { name: `${l}.y`, value: g.clk_y })); } return d;
  }, a.fn.formSerialize = function (b) { return a.param(this.formToArray(b)); }, a.fn.fieldSerialize = function (b) { const c = []; return this.each(function () { const d = this.name; if (d) { const e = a.fieldValue(this, b); if (e && e.constructor == Array) for (let f = 0, g = e.length; g > f; f++)c.push({ name: d, value: e[f] }); else e !== null && typeof e !== 'undefined' && c.push({ name: this.name, value: e }); } }), a.param(c); }, a.fn.fieldValue = function (b) { for (var c = [], d = 0, e = this.length; e > d; d++) { const f = this[d]; const g = a.fieldValue(f, b); g === null || typeof g === 'undefined' || g.constructor == Array && !g.length || (g.constructor == Array ? a.merge(c, g) : c.push(g)); } return c; }, a.fieldValue = function (b, c) { const d = b.name; const e = b.type; const f = b.tagName.toLowerCase(); if (void 0 === c && (c = !0), c && (!d || b.disabled || e == 'reset' || e == 'button' || (e == 'checkbox' || e == 'radio') && !b.checked || (e == 'submit' || e == 'image') && b.form && b.form.clk != b || f == 'select' && b.selectedIndex == -1)) return null; if (f == 'select') { const g = b.selectedIndex; if (g < 0) return null; for (var h = [], i = b.options, j = e == 'select-one', k = j ? g + 1 : i.length, l = j ? g : 0; k > l; l++) { const m = i[l]; if (m.selected) { let n = m.value; if (n || (n = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), j) return n; h.push(n); } } return h; } return a(b).val(); }, a.fn.clearForm = function (b) { return this.each(function () { a('input,select,textarea', this).clearFields(b); }); }, a.fn.clearFields = a.fn.clearInputs = function (b) { const c = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; return this.each(function () { const d = this.type; const e = this.tagName.toLowerCase(); c.test(d) || e == 'textarea' ? this.value = '' : d == 'checkbox' || d == 'radio' ? this.checked = !1 : e == 'select' ? this.selectedIndex = -1 : d == 'file' ? /MSIE/.test(navigator.userAgent) ? a(this).replaceWith(a(this).clone(!0)) : a(this).val('') : b && (b === !0 && /hidden/.test(d) || typeof b === 'string' && a(this).is(b)) && (this.value = ''); }); }, a.fn.resetForm = function () { return this.each(function () { (typeof this.reset === 'function' || typeof this.reset === 'object' && !this.reset.nodeType) && this.reset(); }); }, a.fn.enable = function (a) { return void 0 === a && (a = !0), this.each(function () { this.disabled = !a; }); }, a.fn.selected = function (b) { return void 0 === b && (b = !0), this.each(function () { const c = this.type; if (c == 'checkbox' || c == 'radio') this.checked = b; else if (this.tagName.toLowerCase() == 'option') { const d = a(this).parent('select'); b && d[0] && d[0].type == 'select-one' && d.find('option').selected(!1), this.selected = b; } }); }, a.fn.ajaxSubmit.debug = !1;
}));
